import * as THREE from "three";

export const PlayerJson = {
	777: {
		avatarName:'Admin',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 1,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 5,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
	123: {
		avatarName:'TestUser_123',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 1,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 5,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
	1: {
		avatarName:'TestUser_1',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 2,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 5,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
	2: {
		avatarName:'TestUser_2',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 2,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 1,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
	3: {
		avatarName:'TestUser_3',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 2,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 1,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
	4: {
		avatarName:'TestUser_4',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 2,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 1,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
	5: {
		avatarName:'TestUser_5',
		sprite:{
			src: "./Client/image/Player_v0_0_4.png",
			numberOfFramesX: 17,
			numberOfFramesY: 14,
			firstFrameMove: 2,
			lastFrameMove: 9,
			frameMoveUp: 1,
			frameMoveUpRight: 3,
			frameMoveUpLeft: 31,

			frameMoveDown: 17,
			frameMoveDownRight: 14,
			frameMoveDownLeft: 20,
			//Нам нужен реверс кадра в клиенте у нас выставленна опция THREE.MirroredRepeatWrapping которая делает зеркальное отражения и нам просто нужно посчитать номер кадра по зеркалу
			frameMoveLeft: 27,
			frameMoveRight: 9,
			firstFrameAttack: 10,
			lastFrameAttack: 11,
			firstFrameDeath: null,
			lastFrameDeath: null,
		},
		collaid: "./Client/image/collaid.png",
		colliderPositionX: 0,
		colliderPositionY: 0,
		colliderPositionZ: 0,
		colliderWidth: 1,
		colliderHeight: 2,
		colliderLength: 1,
		health: 100,
		damage: 2,
		attackDistance: 1,
		attackSpeed: 10,
		moveSpeed: 0.1
	},
};
